plugins {
	id 'java'
	id 'maven-publish'
	id 'eclipse'
	id 'checkstyle'
	id 'org.springframework.boot' version '2.6.2'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'com.diffplug.spotless' version '6.19.0'
	id 'net.ltgt.errorprone' version '3.1.0'
}
repositories {
	mavenLocal()
	maven {
		url = uri('https://repo.maven.apache.org/maven2')
	}

	maven {
		url = uri('https://jfrog.sandbox.fynarfin.io/artifactory/fyn-libs-snapshot')
	}
}

apply plugin:'com.diffplug.spotless'
spotless {
	format 'misc', {
		target '**/*.md', '**/*.properties', '**/.gitignore', '**/.openapi-generator-ignore', '**/*.yml', '**/*.xml', '**/**.json', '**/*.sql'
		targetExclude '**/build/**','**/gsmastub/**', '**/bin/**', '**/.settings/**', '**/.idea/**', '**/.gradle/**', '**/gradlew.bat', '**/licenses/**', '**/banner.txt', '.vscode/**'
		indentWithSpaces(4)
		endWithNewline()
		trimTrailingWhitespace()
	}

	groovyGradle {
		target '*.gradle', '**/*.gradle'
		targetExclude '**/build/**', '**/gsmastub/**'
		greclipse()
		indentWithSpaces(4)
		endWithNewline()
		trimTrailingWhitespace()
	}

	lineEndings 'UNIX'
}

group = 'org.mifos'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}
ext {
	springBootVersion = '2.6.2'
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
	implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
	testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	checkstyle 'com.puppycrawl.tools:checkstyle:10.9.3'
	checkstyle 'com.github.sevntu-checkstyle:sevntu-checks:1.44.1'
	implementation 'com.diffplug.gradle.spotless:spotless:2.4.1'
	implementation 'com.diffplug.spotless:spotless-plugin-gradle:6.17.0'
	implementation "org.springframework.boot:spring-boot-starter-webflux:$springBootVersion"
	implementation 'io.github.cdimascio:java-dotenv:5.2.2'

}
configure(this) {
	// NOTE: order matters!
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'checkstyle'
	apply plugin: 'net.ltgt.errorprone'
	configurations {
		implementation.setCanBeResolved(true)
		api.setCanBeResolved(true)
	}
	tasks.withType(JavaCompile) {
		options.compilerArgs += [
				"-Xlint:unchecked",
				"-Xlint:cast",
				"-Xlint:auxiliaryclass",
				"-Xlint:deprecation",
				"-Xlint:dep-ann",
				"-Xlint:divzero",
				"-Xlint:empty",
				"-Xlint:exports",
				"-Xlint:fallthrough",
				"-Xlint:finally",
				"-Xlint:module",
				"-Xlint:opens",
				"-Xlint:options",
				"-Xlint:overloads",
				"-Xlint:overrides",
				"-Xlint:path",
				"-Xlint:processing",
				"-Xlint:removal",
				"-Xlint:requires-automatic",
				"-Xlint:requires-transitive-automatic",
				"-Xlint:try",
				"-Xlint:varargs",
				"-Xlint:preview",
				"-Xlint:static",
				// -Werror needs to be disabled because EclipseLink's static weaving doesn't generate warning-free code
				// and during an IntelliJ recompilation, it fails
				//"-Werror",
				"-Xmaxwarns",
				1500,
				"-Xmaxerrs",
				1500
		]
		options.deprecation = true
	}
	// Configuration for the spotless plugin
	// https://github.com/diffplug/spotless/tree/main/plugin-gradle
	spotless {
		java {
			targetExclude '**/build/**', '**/bin/**', '**/out/**', '**/gsmastub/**'
			importOrder() //sort imports alphabetically
			removeUnusedImports()
			eclipse().configFile "$rootDir/config/interledger-formatter.xml"
			endWithNewline()
			trimTrailingWhitespace()
			// Enforce style modifier order
			custom 'Modifier ordering', {
				def modifierRanking = [
						public      : 1,
						protected   : 2,
						private     : 3,
						abstract    : 4,
						default     : 5,
						static      : 6,
						final       : 7,
						transient   : 8,
						volatile    : 9,
						synchronized: 10,
						native      : 11,
						strictfp    : 12]
				// Find any instance of multiple modifiers. Lead with a non-word character to avoid
				// accidental matching against for instance, "an alternative default value"
				it.replaceAll(/\W(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {
					// Do not replace the leading non-word character.  Identify the modifiers
					it.replaceAll(/(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {
						// Sort the modifiers according to the ranking above
						it.split().sort({ modifierRanking[it] }).join(' ') + ' '
					}
					)
				}
				)
			}
		}
		lineEndings 'UNIX'
	}
	// If we are running Gradle within Eclipse to enhance classes,
	// set the classes directory to point to Eclipse's default build directory
	if (project.hasProperty('env') && project.getProperty('env') == 'eclipse') {
		sourceSets.main.java.outputDir = file("$projectDir/bin/main")
	}
	// Configuration for the Checkstyle plugin
	// https://docs.gradle.org/current/userguide/checkstyle_plugin.html
	dependencies {
		checkstyle 'com.puppycrawl.tools:checkstyle:10.3.1'
		checkstyle 'com.github.sevntu-checkstyle:sevntu-checks:1.42.0'
	}
	// Configuration for the errorprone plugin
	// https://github.com/tbroyer/gradle-errorprone-plugin
	dependencies {
		errorprone "com.google.errorprone:error_prone_core:2.20.0"
	}

	tasks.withType(JavaCompile) {
		options.errorprone {
			enabled = project.gradle.startParameter.taskNames.contains('build') || project.gradle.startParameter.taskNames.contains('check')
			disableWarningsInGeneratedCode = true
			excludedPaths = ".*/build/.*"
			excludedPaths = ".*/gsmastub/.*"
			disable(
					// TODO Remove disabled checks from this list, by fixing remaining usages
					"UnusedVariable",
					"TypeParameterUnusedInFormals",
					"EmptyBlockTag",
					"MissingSummary",
					"InvalidParam",
					"ReturnFromVoid",
					"AlmostJavadoc",
					"InvalidBlockTag",
					"JavaUtilDate", // TODO FINERACT-1298
					"ReturnValueIgnored",
					"DirectInvocationOnMock",
					"CanIgnoreReturnValueSuggester",
					"SameNameButDifferent", // Until errorprone recognizes Lombok
					"MultiVariableDeclaration", // Until errorprone recognizes Lombok
					"UnnecessaryDefaultInEnumSwitch" // FINERACT-1911
			)
			error(
					"DefaultCharset",
					"RemoveUnusedImports",
					"WaitNotInLoop",
					"ThreeLetterTimeZoneID",
					"VariableNameSameAsType",
					"UnnecessaryParentheses",
					"MultipleTopLevelClasses",
					"MixedMutabilityReturnType",
					"AssertEqualsArgumentOrderChecker",
					"EmptySetMultibindingContributions",
					"BigDecimalEquals",
					"MixedArrayDimensions",
					"PackageLocation",
					"UseBinds",
					"BadImport",
					"IntLongMath",
					"FloatCast",
					"ReachabilityFenceUsage",
					"StreamResourceLeak",
					"TruthIncompatibleType",
					"ByteBufferBackingArray",
					"OrphanedFormatString",
					"CatchAndPrintStackTrace",
					"ObjectToString",
					"StringSplitter",
					"AssertThrowsMultipleStatements",
					"BoxedPrimitiveConstructor",
					"EmptyCatch",
					"BoxedPrimitiveEquality",
					"SynchronizeOnNonFinalField",
					"WildcardImport",
					"PrivateConstructorForNoninstantiableModule",
					"ClassCanBeStatic",
					"ClassNewInstance",
					"UnnecessaryStaticImport",
					"UnsafeFinalization",
					"JavaTimeDefaultTimeZone",
					"JodaPlusMinusLong",
					"SwitchDefault",
					"VarTypeName",
					"ArgumentSelectionDefectChecker",
					"CompareToZero",
					"InjectOnConstructorOfAbstractClass",
					"ImmutableEnumChecker",
					"NarrowingCompoundAssignment",
					"MissingCasesInEnumSwitch",
					"ReferenceEquality",
					"UndefinedEquals",
					"UnescapedEntity",
					"ModifyCollectionInEnhancedForLoop",
					"NonCanonicalType",
					"InvalidInlineTag",
					"MutablePublicArray",
					"StaticAssignmentInConstructor",
					"ProtectedMembersInFinalClass",
					"OperatorPrecedence",
					"EqualsGetClass",
					"EqualsUnsafeCast",
					"DoubleBraceInitialization",
					"UnusedNestedClass",
					"UnusedMethod",
					"ModifiedButNotUsed",
					"InconsistentCapitalization",
					"MissingOverride",
			)
		}
	}
}


checkstyle {
	checkstyleMain.exclude '**/gsmastub/**'
}

publishing {
	publications {
		maven(MavenPublication) {
			from(components.java)
		}
	}
}

test {
	useJUnitPlatform()
}
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

